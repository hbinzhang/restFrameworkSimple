buildscript {
	repositories.mavenCentral()
	dependencies {
		classpath 'org.eclipse.jetty:jetty-server:9.3.0.v20150612'
		classpath 'org.eclipse.jetty:jetty-webapp:9.3.0.v20150612'
		classpath 'org.eclipse.jetty:jetty-servlets:9.3.0.v20150612'
		classpath 'javax.servlet:javax.servlet-api:3.1.0'
	}
}

import groovy.json.JsonBuilder
import java.nio.file.Path
import java.nio.file.Paths
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.eclipse.jetty.server.Request as JettyRequest;
import org.eclipse.jetty.server.Server as JettyServer
import org.eclipse.jetty.server.handler.HandlerList
import org.eclipse.jetty.server.handler.AbstractHandler
import org.eclipse.jetty.webapp.WebAppContext

project.version = '0.0.1-SNAPSHOT'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
defaultTasks 'build'
def DIST_DIR = "$buildDir/dist" // *.war files are generated here



configurations {compileOnly}
sourceSets.main.compileClasspath += [configurations.compileOnly]
eclipse.classpath.plusConfigurations += [configurations.compileOnly]
repositories.mavenCentral()
dependencies {
	// hibernate
	def HIBERNATE_VERSION = '4.3.10.Final'
	compile "org.hibernate:hibernate-entitymanager:$HIBERNATE_VERSION"
	compile "org.hibernate:hibernate-c3p0:$HIBERNATE_VERSION"

	// spring
	def SPRING_VERSION = '4.1.6.RELEASE'
	compile "org.springframework:spring-context:$SPRING_VERSION"
	compile "org.springframework:spring-web:$SPRING_VERSION"
	compile "org.springframework:spring-tx:$SPRING_VERSION"
	compile "org.springframework:spring-orm:$SPRING_VERSION"
	compile "org.springframework:spring-aop:$SPRING_VERSION"

	// jersey
	def JERSEY_VERSION = '2.19'
	compile "org.glassfish.jersey.containers:jersey-container-servlet:$JERSEY_VERSION"
	compile("org.glassfish.jersey.ext:jersey-spring3:$JERSEY_VERSION") {
		exclude group: 'org.springframework', module: 'spring-beans'
		exclude group: 'org.springframework', module: 'spring-core'
		exclude group: 'org.springframework', module: 'spring-web'
		exclude group: 'org.springframework', module: 'spring-aop'
	}
	runtime "org.glassfish.jersey.ext:jersey-bean-validation:$JERSEY_VERSION"
	runtime "org.glassfish.jersey.media:jersey-media-json-jackson:$JERSEY_VERSION"
	compile "org.glassfish.jersey.media:jersey-media-multipart:$JERSEY_VERSION"
	compile "org.glassfish.jersey.media:jersey-media-sse:$JERSEY_VERSION"

	// utilities
	compile 'org.slf4j:slf4j-api:1.7.12'
	runtime 'org.slf4j:slf4j-ext:1.7.12'
	runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.3'
	runtime 'org.apache.logging.log4j:log4j-core:2.3'
	runtime 'org.apache.logging.log4j:log4j-web:2.3'
	runtime 'org.hsqldb:hsqldb:2.3.2'
	runtime 'mysql:mysql-connector-java:5.1.35'
	compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
	runtime 'org.aspectj:aspectjweaver:1.8.6'
	testCompile 'junit:junit:4.12'
}



task warServer(type: War) {
	group = 'build'
	description = 'Generates a war archive with all the compiled classes, the server-side web-app content and the libraries.'
	destinationDir = file(DIST_DIR)
	appendix = 'server'
}
assemble.dependsOn warServer



def jettyClientHandler
def jettyServer
task prepareServe << {
	System.setProperty 'log4j.skipJansi', 'true'
	System.setProperty 'com.ericsson.nfvo.profile', 'development'

	def PACKAGES = []; file('src/main/client').eachDir {PACKAGES << it.name}
	def MAPPING = [:]
	MAPPING['src/main/clientOverlay/'] = '/'
	file('src/main/clientResources').eachDir {MAPPING["src/main/clientResources/$it.name/"] = "/$it.name/resources/"}
	MAPPING['src/main/clientLocales/'] = '/locales/'
	MAPPING['src/main/client/'] = '/'

	def CONFIG = new JsonBuilder(
		baseUrl: './',
		resources: 'resources',
		paths: [
			text: 'jscore/require/text',
			styles: 'jscore/require/styles',
			template: 'jscore/require/template',
			json: 'jscore/require/json',
			'jscore/handlebars/handlebars': 'jscore/require/template',
			containerComponents: 'containerComponents',
			config:'config'
		],
		plugins: ['text','styles','template','json'],
		packages: [
			[name:'jscore', location:'jscore/1', main:'main'],
			[name:'widgets', location:'widgets/1', main:'main'],
			[name:'assets', location:'assets', main:'main'],
			[name:'layouts', location:'layouts/1', main:'main'],
			[name:'container', location:'container', main:'main'],
			[name:'i18n', location:'i18n/2', main:'main']
		]
	)
	PACKAGES.each {CONFIG.content.paths[it + '/config'] = it + '/config'}

	jettyClientHandler = new AbstractHandler() {
		public void handle( String path, JettyRequest jettyRequest, HttpServletRequest req, HttpServletResponse res)
				throws IOException, ServletException {
			if(path == '/require.config.js') {
				res.status = 200
				res.writer.write "var require = $CONFIG"
				res.flushBuffer()
				jettyRequest.handled = true
				return
			}

			if( path == '/' || path == '/index.html') path = '/index-dev.html'
			def resolved = null
			def http302 = false
			for(def mapping: MAPPING.entrySet()) {
				if(!path.startsWith(mapping.value)) continue
				def candidate = mapping.key + path.substring(mapping.value.length())
				if(Paths.get(candidate).normalize().startsWith(Paths.get(mapping.key).normalize()) && new File(candidate).file) {
					resolved = candidate
					break
				}
				candidate += '/index.html'
				if(Paths.get(candidate).normalize().startsWith(Paths.get(mapping.key).normalize()) && new File(candidate).file) {
					path += '/index.html'
					resolved = candidate
					http302 = true
					break
				}
			}
			if(resolved == null) return

			res.status = http302? 302: 200
			if(path.indexOf('.') >= 0)
				switch(path.substring(path.lastIndexOf('.'))) {
					case '.html': res.setHeader 'Content-Type', 'text/html'; res.characterEncoding = "utf-8"; break
					case '.css':  res.setHeader 'Content-Type', 'text/css'; res.characterEncoding = "utf-8"; break
					case '.js':   res.setHeader 'Content-Type', 'application/javascript'; res.characterEncoding = "utf-8"; break
					case '.json': res.setHeader 'Content-Type', 'application/json'; res.characterEncoding = "utf-8"; break
					case '.svg':  res.setHeader 'Content-Type', 'image/svg+xml'; res.characterEncoding = "utf-8"; break
				}
			if(http302) res.setHeader 'Location', path
			res.writer.write new File(resolved).text
			res.flushBuffer()
			jettyRequest.handled = true
		}
	}

	jettyServer = new JettyServer(8686)
}

task serveClient(dependsOn: [prepareServe]) << {
	jettyServer.handler = jettyClientHandler
	jettyServer.start()
	println 'server listening on port 8686, Ctrl-C to stop'
	jettyServer.join()
}

task serve(dependsOn: [warServer, prepareServe]) << {
	def context = new WebAppContext()
	context.contextPath = '/'
	context.war = "$DIST_DIR/$warServer.archiveName"
	def handlers = new HandlerList()
	handlers.handlers = [jettyClientHandler, context]
	jettyServer.handler = handlers
	jettyServer.start()
	println 'server listening on port 8686, Ctrl-C to stop'
	jettyServer.join()
}

task stopServe << {jettyServer.stop()}
serveClient.finalizedBy stopServe
serve.finalizedBy stopServe



task exportDependencies(type: Sync) {
	group = 'help'
	description = 'Exports dependencies into $buildDir/dependencies'
	into "$buildDir/dependencies"
	from configurations.runtime // runtime includes compile
	from configurations.compileOnly
}
